# This file is part of the Trezor project.
#
# Copyright (C) 2012-2018 SatoshiLabs and contributors
#
# This library is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License version 3
# as published by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the License along with this library.
# If not, see <https://www.gnu.org/licenses/lgpl-3.0.html>.

import ctypes

import pytest

from trezorlib import liquid
from trezorlib.messages import (
    LiquidAmount,
    LiquidBlindedOutput,
    LiquidBlindOutput,
    LiquidUnblindOutput,
)

from . import secp256k1_zkp as lib
from .common import TrezorTest


@pytest.mark.liquid
@pytest.mark.skip_t1
class TestMsgLiquidFixed(TrezorTest):

    INPUT_AMOUNTS = [
        LiquidAmount(
            value=2099999199946660,
            value_blind=bytes.fromhex(
                "5fa920cecd0db99028e5191e60001b29d36e853d240b78461b18aec61231d206"
            ),
            asset=bytes.fromhex(
                "230f4f5d4b7c6fa845806ee4f67713459e1b69e8e60fcee2e4940c7a0d5de1b2"
            ),
            asset_blind=bytes.fromhex(
                "e3eab79f0bf70ef52008cb5f3d4f0c837a5345ffaa32061c5f9326118eeb2901"
            ),
        )
    ]
    # To be blinded
    OUTPUT_AMOUNTS = [
        LiquidAmount(
            value=2099997399936660,
            value_blind=bytes.fromhex(
                "4420823cfde6f1c26b30f90ec7dd01e4887534a20f0b0d04c36ed80e71e0fd77"
            ),
            asset=bytes.fromhex(
                "230f4f5d4b7c6fa845806ee4f67713459e1b69e8e60fcee2e4940c7a0d5de1b2"
            ),
            asset_blind=bytes.fromhex(
                "b07670eb940bd5335f973daad8619b91ffc911f57cced458bbbf2ce03753c9bd"
            ),
        ),
        LiquidAmount(
            value=11_0000_0000,
            value_blind=bytes.fromhex(
                "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
            ),  # to be rebalanced on device
            asset=bytes.fromhex(
                "230f4f5d4b7c6fa845806ee4f67713459e1b69e8e60fcee2e4940c7a0d5de1b2"
            ),
            asset_blind=bytes.fromhex(
                "189c24279e9851d5814204136feb5713c166b13269dd63fc35c797ff08a6cd90"
            ),
        ),
    ]
    EXPLICIT_AMOUNTS = [
        LiquidAmount(
            value=7_0000_0000,  # explicit amount (not blinded)
            asset=bytes.fromhex(
                "230f4f5d4b7c6fa845806ee4f67713459e1b69e8e60fcee2e4940c7a0d5de1b2"
            ),
        ),
        LiquidAmount(
            value=1_0000,  # fee (not blinded)
            asset=bytes.fromhex(
                "230f4f5d4b7c6fa845806ee4f67713459e1b69e8e60fcee2e4940c7a0d5de1b2"
            ),
        ),
    ]

    BLIND_OUTPUTS = [
        LiquidBlindOutput(
            amount=OUTPUT_AMOUNTS[0],
            ecdh_pubkey=bytes.fromhex(
                "03e51618ad58667e40208978c4dff3683b694154dc7552143c3779d30d56881220"
            ),
            ecdh_privkey=bytes.fromhex(
                "fa0ff0169dc9575674066676cfb0b4eb8902c44269da1cf6ba66d3f8b6d4b100"
            ),
            script_pubkey=bytes.fromhex(
                "76a914f24bb0c13089fb711ecf5c133e7df0818e1b1a5988ac"
            ),
            random_seed32=bytes.fromhex(
                "a9ea0e755a5c2e8210242a08e7078f7f89385eb09423555182568b96e8a4fef2"
            ),
        ),
        LiquidBlindOutput(
            amount=OUTPUT_AMOUNTS[1],
            ecdh_pubkey=bytes.fromhex(
                "023407bcc7467fbd727f408a87e129a0c9a61ae0f05da8cb916ed1d69e8b7290a2"
            ),
            ecdh_privkey=bytes.fromhex(
                "095066a745addb6d8831c2b0f87821142b4456556d89aa82bcadae3a9578fa45"
            ),
            script_pubkey=bytes.fromhex(
                "76a914248036444a09a71e10ff91c8034ba213a179af9d88ac"
            ),
            random_seed32=bytes.fromhex(
                "35a414d025c24b40ae3ac127722988ba973aea8d37179706072ed33a14607ad7"
            ),
        ),
    ]

    BLINDED_OUTPUTS = [
        LiquidBlindedOutput(
            conf_value=bytes.fromhex(
                "0916f3edd39bf22ccb0fd0a88ef58bffdc664c91d1f36b5b362de28be17ef43239"
            ),
            conf_asset=bytes.fromhex(
                "0a706c19c4b7698acfb620a8966d5c256b938c100f8e885e57e21e8c3761916853"
            ),
            ecdh_pubkey=bytes.fromhex(
                "03fab5f773776dfb8b14226ae7b9981757c56c667fda28e90d343786a8fbaa72d1"
            ),
            script_pubkey=BLIND_OUTPUTS[0].script_pubkey,
            surjection_proof=bytes.fromhex(
                "01000188f65964cf16dd257486fc4331928dbba045a50f702dc948c38eb7c2d9684ff5ebd22d101c5bb2d0060264eabcc94e630bbf9eb5d0205c0bd63166a53b261194"
            ),
            range_proof=bytes.fromhex(
                ""
            ),
        ),
        LiquidBlindedOutput(
            conf_value=bytes.fromhex(
                "08cbb1068fcc876832b14633b9d048a678398abe4a10b0497f8351810a3fa2046e"
            ),
            conf_asset=bytes.fromhex(
                "0a37c228ce75c9d15c9a45b39b837675705eed3f5fcd32681c7bd2b91019f35ede"
            ),
            ecdh_pubkey=bytes.fromhex(
                "02b7b6f81ad08e284922d8b0d7bb0f73a35e3fdfe97a91cad787f7bbfb416fa1bd"
            ),
            script_pubkey=BLIND_OUTPUTS[1].script_pubkey,
            surjection_proof=bytes.fromhex(
                "0100019da19bccf1d87248d87057daa99ec55b7ba44a76488f234f895f943419404631758c156ce2307e2f5d739da7356a705e820ccf730a812f7e01f471842fa5329e"
            ),
            range_proof=bytes.fromhex(
                "60230000000000000001ac9c01ab64cf8d65a5fdb3b2198ad241e6688380f0c690eec965c441c236ba88b2fe32ee71a0979e751f8df7ea29d5227380a9e92416fb9cb43793eb41d536d986a94edb5bfc1ee5983ed7fad2c7f3fd4bd8a1de875938bc5a32ad377ac8edd044d876c71c8f95e51aa9eab5190ba31049a3cf295e745528c9cb61d7229978e212ae5197764ad76c05d31f6887792e3f25f2d5aef29fa114707434302164e6aa5e2f521fd55e80759d7e45a02c502846c36b23613c1c62aaee78715541d4346cce2d74baa08c33c91800f049514d9c09f4d451adb411c9a5128f4047e4bfe025f277a906a3c9318b2d032b2b1b76b61f231c6b95bb3c9a67d4d39a3140d7e05d2f2073af8b35814533b497c09275409e6aa81c8521297f82cf23c363f7637d53cee6dfb5c44c10e535d66ce2bc26e423d0eeaeaa520ad671e24f287985a39349b5c694490e25400293fcb4d4e1557fc1b0ad4bb3dfeefe486d6b72c40d0e1d789bb1cc4b4528a470f65fdd4560ded449bff313e5fa39dc9534ce02446c354a9a1e597b13e8fbc816d8247b1057559b7f410042241a91f67df831a3688c78a2d7363f7c59b5be5db86097347abe1ccbd5fc8a4f64fbd3b61143801f21d05229950210544bf44adc12ecf86fecce2314cac965d581dbf6163f9752e7bf89f63c4d0d5e3682f8b769feb37400d43054d9f103de50002a6cec869973ab67c4dd8f0e9ef075e161744f6489fe05d1ee9f02fd3dd8e160d4c045d9f4407d5ebd47fcb0f4a0fc6809c8fbcf083cc50d60fc5d2ceb2b259f404d7aaffc837d31e63b61537fbbf9847cde74b52f3e7cb96b286c4be51d9f9af3ae7190b7a530a97b172774be8a3969ae2de0cb4c6e7d2437d85cfd215b268eddb5e21df66d30f10cb42fdf6a3652d2e2140b36b1830a5b7a9c3008d4c9e49c6b47e30f5d9d51d768f977b6257c74e6a9959ec63b6906fdd3d2e1341af08938790845682d2484df46b5b472be751019825c9394da295a03a695a23ac2a9af78c37f5daaeab3f29e526311a677792d4551e01bbc8d86a99a649fe69ee2895a672483de7a5ed277cc9770beb05432e4f68bc6c3a16294a4c34510b099db17827f1af8d679ae1ba65da7279819c2d2fd9002b67d071e8f4bbb1d02d53041d7bac4503f9e39413ab7dcfd0f3f36c1217ba3bd5f4c534ca183c1ee1cbf15b4dc477aeddef5426acf8983ecfc2685ad6cf13a0c70beaff5e9be045037b55ef44d1aa357ef833bd422b1f88badbc38efb8ec4a8d6410d42eb9898f229d801649623b01ffaea326ccc1b123b051c239035b011b84e0e5a0041d45ab3b9c68e55fe1afe4611aa9f7e2f87a2b295229ee4c7b46283969c52e1c91304e2c08283579a53b425caca16ee9dec2e86f3d98623a984a8a36c5f1220b890f3eeefea9f4996f2df154aa17eeab760fc7e357c21596ca553b6042401fd3f68dce2b682a3ac49dc5a3b14506d36df2d506b222bce216bc066f9da5dc78bb536551db67ab5decd42ec957f38d0ba25db7a4ff0d8515ebb2e1ae11b28a882a5bfa679c8bc54484f370ac8a5eef4fc9f2ba3f54ab66e587304590d69ecf358a80ef60fade5f4b17be0aa60ccd6c98040638c7ae8832521f39b799284e94a4e2f6f41d084f0ad6418daf879cb12f456a0da5b5d1000896ffc85403b6290ce0d1431e6008a0ab1a2ec843f1466370a2b5a5afc2ecbb029aab32cfe8960a4a41130d69ab9ec30b9675027e61cadf098c3bc6aca6083f31312e7b83e46324ab27bda9896924b77a12409c709b39d7c649398451244d6f1847e93ac72ececc59f39d86fcf3f57765e092176a7789b1c0c4d9184cd34f1e09389e57a6052663104a95803e79001e79440e63cfed99467d43b16231733800f5d71c1f1955bee4d9aa34054b56d55bd7143aadd67be00f3e998601599cab277db79e5817a06bbb67676bf0f775507f42517e314801b766ae274f2ccad512c2402505ad62d145e47c51007344d4fb8a71e5bb1309367c51a2ab53b355592635423ac71b22e7622f078d6d0011fb18b5438196ee771694b7be9042a1de0332bb7a2e3245ee287467e32699df6bc65ec0be19c26d5b6ad7a966483a351feb4efe35759af3464d89fc62afa21a05ca511b60088ba38c7537210382f599bdb7387395279b0647bcf367c7e396f9c6fcb77f8ac161f0c8e4e5747f0754ed26b549aee99ce10edaebd1111231451a0a3c718d543df03efe89053a9deef89c66b4149da9460b6c6221aab7db2d36b9d49b63b488f560fbb51bbffd69044e210dfe5ef29d68c5480c7d17f0861b44d80d21c6ac4bde6198b3697da36984673abfc7ec5c5985bbf8d83cc9eb3e0663e590d54e85be8f9ce53d61f7da1f567b150a2a72ab7f575bf90c757f6c9f0179df79134a86058d2854fdb17573962c5f74068c48d53f81344eb6261161be8e7b9c424a716f1e9bf1a6d999e620dd0143657e892466bfbdeaa56ce9d81450aa3b48b1ede61cb1d4407003799fe26c23f3ae2d1cab9761b18409fdeb1df3b26cb2eb7750881f0237f97c0e0c78408d1a4ae434220813b87c66d1d8c5dbed283296faaa2ff7d42ef0e3c2acabf0b64e4e2f7f194c37ea280fa8ee723de207a20341a15fc718fec3b3df77a6d987e67d0cc5080d748e33e868193c05d0bb8686e1b06775d8f1c66605df7c979439b7860c75dd4772c6875c360afdd3ec12692c201d4adf423d6ad90c4bbfb9ac14e8baf2728b31d1a46174002a3a873308175cb5b652fc1b3ef5e35f469de2f3b635d8acd43fce4caaaf17958d6dd22fb7d56de774688885c41e459160d897d803959eac132ebaa92789c1b5196dfc2aa45f758e18c444ad706f84dc4a51fd68fe0dd6ed96a850e55683ae4430b41a5bad1c0421185a54a10068d51b1fa72f054cb61f1384c29d1669620b38d955a386199092e74287585e1465fd1eb254d1926af88046fee48040fa515a341407aad9f7a8149473324f250af82b9e09d20529118afeecbe9f33620023d7fe701e8bb2bfb1676179785611ae9896000639ba944bfd21eb9ef66028dd5752a174559a7e359c7a6d84d0c68a9b09289a904af911b5bf54aef938365e65ad98a578b4c8b0bd306fe8984c38f398574ef24319337feeceb2cb232f786c8246fea1631574be37f318aac1c51cb6f90a4be10c5a355e3aebb68c158f0bc7252e3cb1d4be40a2bd73ac761342e1b1528a8f370b239de79ff489123371d11d6617f7513fe572c53ff215bdd03b3d6662c0fc78a70b30077ca4e95d83b24042cfe26a39ec09e59dbd3079a35d7a942591abd261d26e9cddd339050a6f1aaa158cf8be3253297327845c021490829a31474bd17a482d035f9ee6b65424f3286ff6e837bbd0c7834798560a0a9bca1a1f4b25c4b3dc515bb78dd147e58ccfd821830ec5277386128d1da82aae61c8f2b741c5caa5fe12bd6cd1c4d4d5b889b8a120dea39919f8e22b36111a674ce0e3e7676a191e9bd2ffc3e4d08e45a64cc4e577e9ec757935f604acc58fbfc39ba644363a9631a4c20aeb2dd0bb5fcf5ab5e2d8b760eed65a6782665e3d777847465ec749c67dc43bb078ed0381ab95602842b8ec7edda475df97552ad2af30a450a5367632854c8454c686e67bdaafe596de39260a2b9103f365391df3238194498f7551b8532c064ba0aa656feb5e8d1c9bbee56527ee158a6674fdc38fdf502ffaedd7ebd9824bfceda559210d4be3200f45b78a9b032b28800a54c4eacd2153ca22aeb2b69ba4bdd0cc85d5f379f6c6fce1c1457706f0fdaf36f2e46f04a766b9623dbf343b3df2469dbe99ea79d20f40d514add83e7d41cbdc763994965cd7fa74195c9f8299fc923210500233c35360899a12640babd3b14cc78ff25f5d3c40770fb2f456867af0364ad182603a92f116f5846ca892f98f5dc262526f7744d4be2bddd0857c46ce628d9cd694131d41155a07f2f1f69ead242a35198588dd6609bab3bb38e543ae2c2e17a647b16f69b11d010d14c7289ee6b128f96052d3c85053083086b544da45d7f3f76c684892c3cdb007f38c97"
            ),
        ),
    ]

    UNBLIND_OUTPUTS = [
        LiquidUnblindOutput(
            blinded=BLINDED_OUTPUTS[0],
            ecdh_privkey=bytes.fromhex(
                "8ba892ac8508abb576daab4f966c3ed3832cc4284b4632749c1ee496d9dfe6db"
            ),
        ),
        LiquidUnblindOutput(
            blinded=BLINDED_OUTPUTS[1],
            ecdh_privkey=bytes.fromhex(
                "6527f295b57d3788edbfca7a911da6d62e1238946736d47ae04c714502b409d2"
            ),
        ),
    ]

    def test_blind_fixed(self):
        self.setup_mnemonic_nopin_nopassphrase()

        blinded = liquid.blind_tx(
            self.client, inputs=self.INPUT_AMOUNTS, outputs=self.BLIND_OUTPUTS
        )
        assert blinded[0].__dict__ == self.BLINDED_OUTPUTS[0].__dict__
        assert blinded[1].__dict__ == self.BLINDED_OUTPUTS[1].__dict__
        for i, blinded_output in enumerate(blinded):
            _verify_range_proof(blinded_output)
            _verify_surjection_proof(blinded_output, inputs=self.INPUT_AMOUNTS)

        _verify_balance(
            inputs=list(map(_blind_amount, self.INPUT_AMOUNTS)),
            outputs=(self.EXPLICIT_AMOUNTS + blinded),
        )

    def test_unblind_fixed(self):
        self.setup_mnemonic_nopin_nopassphrase()

        unblinded_amounts = []
        for i, unblind_output in enumerate(self.UNBLIND_OUTPUTS):
            unblinded = liquid.unblind_output(self.client, unblind_output)
            amount = self.OUTPUT_AMOUNTS[i]
            assert unblinded.value == amount.value
            assert unblinded.asset == amount.asset
            assert unblinded.asset_blind == amount.asset_blind
            if i != len(self.BLINDED_OUTPUTS) - 1:
                # Last value_blind is updated for balancing the commitments
                assert unblinded.value_blind == amount.value_blind
            unblinded_amounts.append(unblinded)

        for i, unblinded_amount in enumerate(unblinded_amounts):
            c = _blind_amount(unblinded_amount)
            assert c.conf_value == self.BLINDED_OUTPUTS[i].conf_value

    def test_unblind_regtest_txn1(self):
        """Sent 0.1248 L-BTC using elements-cli to CTExWxzfzRCb6TMgk4F1Hjqmba3ovvPJn5HBjKuhoZPpqScXxUc3yx2dwFAYKLrLSHwUjueLe81VH56G blinded address."""
        self.setup_mnemonic_nopin_nopassphrase()

        unblind_output = LiquidUnblindOutput(
            blinded=LiquidBlindedOutput(
                conf_value=bytes.fromhex(
                    "09a25e59c2573b6bf7ec35671b972686877e53a8b76c1373a6f4a68631add9e68d"
                ),
                conf_asset=bytes.fromhex(
                    "0bf88b19f515a5487a70612cd50480390cb8b13f3c91fe1ccbe28b3a1dfa5b00a3"
                ),
                ecdh_pubkey=bytes.fromhex(
                    "03d78b3a48cffa8a2f63679d163afbf861eb4deb7d13410cffd50c954ac9f7f920"
                ),
                script_pubkey=bytes.fromhex(
                    "76a9143a56a008ea50c69036f345a8b274b35bb156329288ac"
                ),
                surjection_proof=None,
                range_proof=bytes.fromhex(
                    "60230000000000000001ee0e01422814168cc985c87f33f98fdfdedf181ea041d501464b2e53d5fd4711e02d7b3e0cf7b18b54f6e1693abf453a5a2b8aaffeb71efacbe38107f6e320e7d390db3c9383b8794a4d88725002e993acaa93531aae8c51e6e1c1020c966c4717cffc6ab86016ee280bab462e3a2e1df87312fa2bdc0d052a206c77cce53d15689c9d6ccbcf1e82847b90e0dee95ae890ccd4ae06f9130ebd2ddc1ef696f3e7599e25ee90f0d2fbe6dc190ce0ca60faefe4c788e6e4f1051214df925de0d88ca561fb28058893a687acbd5c98bd4cfd92dca1c52c22ffd5b7b7db107f25c468207f5d099239c26027f29d6638e92480e7e80ffb70d201589b0923bcdf05086cdc326341c5a06a6cf8f9e18f0196db93315933f6f9f2ad740e6d2619a3dac11dc018717c41173781d15404a31eec09a33c4e547687b0b44cefa92945f2a5d8e704f435596ae33833132bd689bf5fa1e35aa41432488646bd05c6b3e9a32b22f510b5b6203d67f55d7a508e007f7b9467243db32f7be5e071ba12aecc8b9ed208afbbccf9328e927732b8ffe2b13897a88ecbc0a45313e6047982e17bf5b68ad016c8873086ac0f9e01e4c7d5e86b367be98baf3a9668bfcb1fdf080e3571a950eb2a734e4cb871732690371c3783ebac2dee364377477d6cc8a46364c59d8b7795ae0f3ed5fadb395a15236906f8ce91a0f31cca9285c3b7d40c69f9d74758d59ea513194b7e2f340fb93433c455b45f70366fb8c373956bbdb8dd0f1b4ea1f456d6139e6d4c9660b6d80a8fcee2c2805f8dfa988974c551b1fc9638eebd3726185845c1a8fa5293d9910eefb2174cf44fba7b039124826a07eb1f9bef76c3c8f5eb06a2257d309689aaba1559583f8f42baed38887b3474c40bee8fa9f3136105af3953605c6f8376d48c1003c02b8724292faec3ca50d835acc989401ae295da5305f1cb7142c532648215f898528102ece2f0c538500980f310bb832c8804f59e7e23c3a3ff9fec5d2936113ab3af329264a24addfa750443fb91621b6ae0b84d9b5babb7242c6090abd4ee378e0604fb8b796e744bc73f018224d167aac0070ecd35d6297da3137af97baa52912fcd121eda2c948b860b0c07c09fed66a844e3a07c4f5fd63fb931d967001a29138a5337483153aadb5d2633680517b91eecc921c8975367d69aef12b33b7a9a6a2d6c296490ae52c9789203848be6589df4a29f9b6bc92adfac9590620d814ff63d517b3093f7df9cff1276ba94121d3ea4ace3d0474a2ebde8fb5c9eec3b1e3fb93760ec3b56f24cff0677a92a236d6c507051661475fa6f3dcd99cba97af310993ce0a30dfdcd214c5435334581337b94b39fa4599588501dd6746efffacf46f3387b731dd96a755be0ade541fc2a4cb3274b2eac974361d669a9c6563bd905e97f0cbd8c2199fe39754546e4cde69611cb3e6fe64ed2ad810f7a74510f71e2e26bf988be40ae7e613826f2d34656fe6e358c082d800f58797b6adb13c98f14fae9f168014f836936266c257f53f99996c379bb5f97dbc31c31dd16cdf8ce504717772d890808213adcb6546a36e1b14629e4b38ccfff0631c3287459b5700737da831280a51d1d6888e708d6c8d519744f01e242939deb2e15c2c5a64d82b63d45ce360e7f86f75456d81c8aa451144d2f72f81fd69093d393d9516076e1f901b9fe81565e5de214e97f6a43921d982cf0de00b3883625887b541da4b103e01edef6138d9d0c698af727f3df242cec5a6f21b70aeb85c8a8b3975461df55d9b21b7f34f7d93584f5558a68d84a91b309c4de908e38dc23c97abddffe1a01250ffc46eca203540984628ca9ea12bf6d7bca9e09fe6fcd2dc4269895d6f256c652dec04816c833c2ee6a5502f5ecf876cab6a8edf4b6e824dd14bb86ec250a515dc8c2ab63879b11dd5fa33984bd244be2c58a62366687c48bd7982b0817fdece29369543af3084b113923661ee85f01c6733741453c6829bbc3a167b1b569afe7719da3d6b8f91161a1b05cc7e9f7c8c6798aeddc5a0aa544e50e43d857d9000770ccde17ed1c1e302c2801cfe54f8ed3fec210e4896b42f2a649e5f1faff614a8cc66a4b0481522d2890239189834373d5d993c09598893ebd01a2ef444c6124906ce1310ffd9c3152d665ba82169f451b9a186cde857246debd57c81d3daade74283ecd9130f7d3c4c9e437700b75521d5b4d3a7a75284915fcfd61fe52b50f508887fa4cfda1d6e662fda4912f6ae9a39baea02253cf2eb4bfb5f80eed7ad3f35999db28192841caf13b730a8f816798b26fd57da9eca6395b095cda83939b594c58c1a682fc7dbdc605e995275b0203b385d9a76254807b9bce66c653e769beee6058966c9442a54a5566a9e5ed9da525e110827b9164f3e9bdddffbb04acbcacf866c8be8f34c5ad7750a4cfe8c806ffa60009306aa0f773c5c95e335b9a36f7c02e1558ea961858b53f73baa3addaf4bae1d989f051b52f111735927b74837ef092fca5f5f4825399863551ca36df15f933f135b1374cea247e9e59b62ecbc17859fd3d0842a443709258467d587351ec8fef02fdd6bf10b2509d0bf648074d6513c9d18e5985649313b95a5acb5c97897787eda61fd219e8d76c2dcb7887830c715eb7305a6d948d620294b0f0b1988dade14c3679cffae15991b2041a787c652f00eb5a4ff6e239b6ec4e312e4e9628b5cfd0eb7a7ea9d4d35c599578e5ff2ec726fbb15f6ed6afd327f02d7e121735c3ccd17d46f73c1f30da1157cbba791cf06a56438f11c01764165a1dd62427c0c48a4e269f40833bf9c430ba4daa5e42d9768859639729058f019b681b01a8aff85b62efa893d14f75e4925e2db6e9b2c9440e5dba9feeda754860cda645cf05c469fa8a3a4ddde3be4f536219f7cab26bb45dc8d86d963d654060be75afa4a0e88e64dc9d9d01e7d07a1ca184212205065c95a614be8e279c6372268b4bad0397e29a448fcd66e48d145296e04be7b385b84eade6c9786cf2d42302050637298b22abe203dcf2318467d3f7fd4c3034fc04980b711c5c2e10c2666e0f57d1197c55601b4eb7debfdeb5fed8662031dd2a4e5983454b889a4ed8c9d5e06f54bab441d1cb59a233e1d8f91f8382a3cd4b44375490ea0b69c22961b7aae7ca55d98f1e55b792509a37a936566403f14239d241685893a13c96c7dbc703c165a7a4c0849a6a63a08122b3016850be8a7ef401c9de1d74eb21bd948d19749ea68fb0c6b608a84341cab6dcb142a07816925bea861af3939c7519b6ef6c814e12cbe7cd7de6304003e10049622e52a213bec6edb7a7396eaac522b1e1dfcbf07dc179d9ee9cb4a6c019ced2450c50211df2c90e8c0e1b4e42a315310fa7f2c8a91f568f180e7db747b9cd769f6eecce78710014baf7a9d8a642208e6179a67881a3051b8c2ed9d7e19d9cf46ff669dc265390d016f962eeba0aabc7a45d5ab0bc80be7f51d662c35eb88f6ad9c38ae3c6bc27c05a7b640dab025f9a1ad394bb1c1bda2428c8ff3162cde7b2d651388b541426552d579604ac5e1de291373492b11982688eeea12129bdf934b461f4000ad2b49c9c99e78710c5b15766bc749960061f233a6a5ec4700f06720967eea8ed38f4c0ad86af7a42f296e721d4d91eae6dfaf87fdb71b2851d78cec8c2ff486a8fb2f6e4a60a9936c5fd3215af9c5f78417813b521d78bed5bcfa8cc118c430865cec4ebd4d278dabcfc8ef88b0070d1ae0988e1ad1fe92ad35347196a92cdb8c96f16bc0ce1a4ce90246d0028edc6f380f857a7f8fb7b9ff05b98b063cecd006e5b1004cd20ae24212e9060e46e5498626d87e8879ed4ca4d32f8ac7da6d220e3eb149e6f6b4b01b3eb8c17db22fd49b6d121e3615caaf92b64af4423fb69d3b83a7ad58fe3304f7e5cdafca7ddf4f99bd3830926d95940065236175395eed81fe8cf1a798e61dfe710683bc9ead1db5ef5e7da73423d081c2cc70760437cb5eaa802dccef4f2580fbb2d59cf4b004cb9fedf1a54c0edbf460ff630dc25c951d3a530f4eb031863d8f2bb7bd606bc5df2"
                ),
            ),
            # Derive ECDH private key from provided master blinding key:
            master_blinding_key=bytes.fromhex(
                "4ae1ab9d1846cf70ebec7f1b212663d3a4c8b4c3d78f5c0e3dde55c230c496df"
            ),
        )
        unblinded = liquid.unblind_output(self.client, unblind_output)
        assert unblinded == LiquidAmount(
            value=12480000,
            value_blind=bytes.fromhex(
                "148f415252440c062fd7d65a9b6a7d8b30212bbf507a8c842810a42b713219fc"
            ),
            asset=bytes.fromhex(
                "230f4f5d4b7c6fa845806ee4f67713459e1b69e8e60fcee2e4940c7a0d5de1b2"
            ),
            asset_blind=bytes.fromhex(
                "3c21809acd1b592f07bf304af72179c8b000c14ebce712629788727103f7ee0b"
            ),
        )

    def test_unblind_regtest_txn2(self):
        """Sent 0.12345 L-BTC using elements-cli to el1qqf6phclaj5xd8x5t8a94vjtwu7tgh636x5tz6pkpxr9kx8wjuu8vnvcac23rv5z6djujq8aqgyw28z39ffalz62w06u8hgg4g blinded address."""
        self.setup_mnemonic_allallall()

        unblind_output = LiquidUnblindOutput(
            blinded=LiquidBlindedOutput(
                conf_value=bytes.fromhex(
                    "088c783fc7dac650506e9aa6d334d4ff9e91536ff132633e1b8bc740df19f974b4"
                ),
                conf_asset=bytes.fromhex(
                    "0a0a3c297a713cfc120ba519c2450abe7c90f6a4fb187e6db7edf3fb8130ceab26"
                ),
                ecdh_pubkey=bytes.fromhex(
                    "02d9fd9cc80d449c276821323f46c0c5ee4a7a8aa07cc403f46b3cbf8130127b4f"
                ),
                script_pubkey=bytes.fromhex(
                    "0014b31dc2a236505a6cb9201fa0411ca38a254a7bf1"
                ),
                surjection_proof=None,
                range_proof=bytes.fromhex(
                    "602300000000000000012d5f01d33ac82186a76677a727b3830667a602880ffdefed417ff8c690b73f5cfc5dcc7acb78a4cc9c1af9b252b8ea7662acb43c43e65703c2a94439ca1b6a1b42b7029f8a767f4e922636a4661f9af3e35436def22b91331586166233550cf2f35ecfa2d32452bd9e1bf05d1e00257045745ff76607db09a18928f6c02b45236b216189e4ebd488b566cbb01ceb0412a3c25e59c11afbc791e6b19186d051b99b33ad95b93839fa843bca4c7e09cdbf28d8c3e2797fbd97bd48d892c632e8d3f27caab6f7d467caa4bb4a6cb9d37ac8ed97bbd18a37d856d02e018a4c1b2407347dc06d6c64eab22aeb2d6f4263574146a69ce495127c12204df487e4d93d35f39446a7842a10b346ef39edaa6a3d39f4888de180cc71e48b54826bb263dc9c6af79d13fb02b1fb1e4ee4cc261d901662c83fe9b0564c34139a4080a618421ee9c643c1601b05789ba4d0ffa5bee26275e876809bf283a90ae502af25e607552ccbb574492e11b3f4f8447ddb93ae7aedd1ef4ba7cb915b5310e740cebae5fe1e75575f9eadcb43c71e99c65c00205cc90320920b7ee82bd35eccc361c93a9056665e06e2cae31a0b9164a26be98e2ea6d8261484b4507bb40ed203e0870e9f84c87cc042318422921bf742f1294ba2096490a459b74b5d39bc87fb2e125c318d4d295cf2f8c89b31c56cae4a4795f137b89fa33c04c8a990277c88c81f4fd4f0cac18a4648d581054fabd4f1b530c9a59437295422bf7aa76a710dd6a92a102c5a6bff7794c166e995f301adcf6004cc9a21221bd1767edc87b279783b8008ceb47c0c4eadc37df551b868c0e318a1d8a09201490bd679b5fecc637934536002c21d1bbfe3c5135878a0abba9eb7e32c2a01e5c12fe71866ad9f4f935010dcd83048c179f4876ee794f471431024960f7502a55713439ae18ebbb00849ecdc59db726454ccbdc06dcdb5ea6c66627825813fe0d2351eda829154ecb9b59e055f5f24386e093f3cdc7a45547f5af250c7e1ef0f3ce07e5cd274732ac09eb9664754789dfec59b750ad005fbe5860ef90602b5e8fe6209f389e66e4db4d09bf638de0ef1a42ffc71a8f161ade734a841e081135558326baf6487dd60547310fba7b4af7a52cccdd4ac3dc65a766f9131e9cfa3846162c74b1df70195b0622abd24f3bcc926b2991d052e4bb41613798314d7b9190d480f0c46b52249bc6b8408a507acc4abfd570a4b2e1b5058cfcfe9bd8c951c630487bd6b82ca0c74f8612652101f5ece8101d176999817da0826e647458c9722553ef73d85bf74f06ad9d1d97d70f9354d83c018e11b91aa19378eab5b8f8b476a862a014a81b9734d1f1922db469b01455f7cde6b079e0b6cc71fc5ca9c9af542ef8c3ea354f613e089ba77bc1d96065ffae1ad09b84f01e57827ad0479fc09b7297c7877678c557aed1a4acfe2a8fee2c8d6b26304dee77817b5e519aff666ce34c8b2057634ecf2406c21b3a755a38c1b4c9cffebfcdce6c00f98826722e3857a17258e8bef028344a87bf410b56a734b38f042e59da37175011821c3564a6cfdb27bf4bfd6b99ea3620ee14aa5e5a87f99fdef11306ba4f8f16203c54f347cebe016347ba0fb794c7fae9f3fd060fad7be6a11884affd9de77cb876f3398e45b1e63d77ba6de755ec2719d8680c3ba81fd30fd6141d032d26d6d17104dbcbc69f165da8e8bd22e6bc80950136f3217b2de5dccd02c825e04fc5bb3cc69e355a84f7d87640ed155be9772984a3494e90d2ebe0378a2a326829a2bb293bbd2d08795ca79de98cf3e6d8e7d4f60a668f69925e0354539cbc2d02cbde907ff23384ba62afd0414332e3c5586fcaca44d43dbcd0b4c9d542e4839af29ea82118ac9e8cbc6aa8f2cf28cd291ee4c141119411143be04f5fd374368fd5557c870ca887b8508d3c45bd7f4eee24263f30d89786acc0979e194fb1e515ff0a59ff4a37f84d6e05bc4bda8b747d9be1db991cbff311818bc868f338f1d667736654811982899c53fa565baa13df6723d2c3a5f42cda6e839e197b10b94001fd1847080d1b189c08952bab59b8b663fe26d7a6c3bafc988a5a9f4e7895355e036370e7f1b108fdf0e4e3178a3f33b7e144961af3a03d4e4c65e87786b3c62ba893e1a516994049342f00a07e04fe48e85e5abb54538efb9ff5290245c950630062b5dd2d7dcc80d0e8211eba36a0eddaa1da8ef2063c8e3f48dab1d9eb027af719e050c9424a83c14d4b62c902500ae8304d101626f6abceaffc1405742881b7b26ad446d5dff3eaefe908e31e0a7820c89961f4e3a8ad147bb0d9fa9c0e17328ad0aec52f270e2e960b0a0ab77e5a738e53295d4f690dff9e368e36e839714ad5b89bf0b0a95e403d365bc2fa090cd89b9338fc942235f0184d7b41673624bb47ae568c19ab33a28614ec5097bf2c52ca5fef800113c665c85828af2042a31e08c29d64ca5cbd78b340a0a6346dcf2854e4b6a0f315bc0a094ee9d29cc7ed4a4f4e09b707c551c75643b9cfe7cd43908319752d315e17da9f9b800521135c31ec336aa9111bca8ad8b120f8f22053512ece7ed5934f7d634b24bb3627f4293bd2671e605447190fa6b81ff92f0c966b41f597f89721f2b2ec5cf98c4694e1d451da59e7b989d1953ccbe43088edc0fd7cafff5a271c25636ab8c4b7ca5e164327e2de88ae25a2165a921c4b08751bd53e02bae77a1d5f0538fdf2a4ec515e257cee2dedf984a9cffa6a8007b185166d924315be7ad122b4ce96b5c92db75cd4b3b57346ec59396b786735d8b9413229b22417b854f3d0def3fdd6b3e7affd14ab2e453f4b6e969d05b0491441ebc0cad2d38ef4032cf0c10db7b735beaf3fecebf1ffa1b1e463996364881fe67cc190b3691dc08ce316666ce3c3faedb7ea39d89c91838f1805c1051ab876eb417ea905e67ca5187248cc97aff6d8441c04568e60eecc7b680bca49eb94484ed3deee1b1443d956d6e9264b2f226bf9cee99007ecdaf08a5934d8a11a70eecc5f62a9f1887bd35ec3e8f2d17db17c1b42177ab67b498dedd91cfdee06cd1206b60b12f8c5da13c9f90aecb54d36a573a3d46abac3d1aea05d7e924fbff8838d10940669c9f00462e3033b2687d1f2b9357e9b9a0c40eab03f26da6b09a92a41a82709e836e8fcbc27cf2108597d59a34a9359ac772c71ad909b3c64f65e5392c23e0c88152f2e88155caa4027a291653efa013e8419931f61a6379210c6d4f42a6251acb85df2a10cddfe0ae27dfb5eff0623cc38eb6d3aae3cce9aea04f087794f8d2bfe0cd43f589249870718856cb374a2bb9f6c57666256b3847db5cba09267a53ed5ba6568795d2195f7f4dd271075a91f8fabf800f968bcd2d8b832cb407783acd60fede6eb77689e375d597b228f8d04ce81ec81e08c0f67595f143bd415466507b5766bcde93f06145c373f941618a097aaeed2ec5b156c15419b27037cb94982e9690c9e68362e184ce47ff67a0183de2dbebb3926eee929044be4b70303221b4a1d0d754631ceb930a02455a6fb12862082e0032f4f7880502f282ce0394217e4829e59b6cbb77273e23dce0a66f8daa5188f648b6abb47ef65057afeb77b912b8f497dbc0d89ab5c726894bd808f48e959e783db567031fbc94754f31856dc7d96b48addb090a2ba9ca7241e416ac7789950f47d65e0553983c9b880da56ed9aa78cdae2b6e4da96f7674b667e48a4947bb2ae52d69de89b49fbd05b6c7eebf352a0c00656e3a6a3042a55265699b4a3eaa1f55e6b76535f6436955ba81a89d8c4841d233c315a185090aad707731c3d7054d2d63d3d40243239930b5d6653bd7545c0681b26ce2fc98b07933fa11749fb392c98717552bc5517abb0d6b7b0f23a213880b842f24257760bc1b020f8b40143d8ac9f31ab0ad70892b035d7f14c4152d26dc53b7aa28398a6a7f2a731d84a0bf1bb2cfb4b08b398b28b510aa09fed9818121739092f3bf9159f2fd7e1f4a9bdc17ad2721e05b4a4c6734a216606b78deb88437bcb4c7005d788b52fb06e6f56979d49969565153f3b52024ce"
                ),
            ),
            master_blinding_key=None,  # Use SLIP-0077 internal derivation.
        )
        unblinded = liquid.unblind_output(self.client, unblind_output)
        assert unblinded == LiquidAmount(
            value=12345000,
            value_blind=bytes.fromhex(
                "b55bbbefeccce37df39f592046e74d4585dd6c5bb2849f7ab9e9a156fc906311"
            ),
            asset=bytes.fromhex(
                "230f4f5d4b7c6fa845806ee4f67713459e1b69e8e60fcee2e4940c7a0d5de1b2"
            ),
            asset_blind=bytes.fromhex(
                "b5f1b784b675c2ec943a167c8b57ad16543f44bfe8d059a8d8b7e8a4c0bbe6e1"
            ),
        )


# TODO: check output surjection using libsecp256k1

# Build by:
# $ cd vendor/secp256k1-zkp/
# $ ./autogen.sh
# $ ./configure --enable-experimental --enable-module-generator --enable-module-rangeproof --enable-module-surjectionproof --enable-module-ecdh --enable-module-recovery
# $ make


ctx = lib.secp256k1_blind_context


def _verify_range_proof(blinded_output):
    conf_value = ctypes.create_string_buffer(lib.SECP256K1_PEDERSEN_COMMITMENT_SIZE)
    assert (
        lib.secp256k1.secp256k1_pedersen_commitment_parse(
            ctx, conf_value, blinded_output.conf_value
        )
        == 1
    )
    conf_asset = ctypes.create_string_buffer(lib.SECP256K1_GENERATOR_SIZE)
    assert (
        lib.secp256k1.secp256k1_generator_parse(
            ctx, conf_asset, blinded_output.conf_asset
        )
        == 1
    )

    min_value = ctypes.c_uint64(0)
    max_value = ctypes.c_uint64(0)
    extra_commit = blinded_output.script_pubkey
    res = lib.secp256k1.secp256k1_rangeproof_verify(
        ctx,
        ctypes.byref(min_value),
        ctypes.byref(max_value),
        conf_value,
        blinded_output.range_proof,
        len(blinded_output.range_proof),
        extra_commit,
        len(extra_commit),
        conf_asset,
    )
    assert res == 1

    # TODO: free allocated memory

    min_value = min_value.value
    max_value = max_value.value
    assert min_value < max_value
    assert min_value >= 1
    assert max_value <= 2 ** 51


def _blind_amount(a: LiquidAmount):
    generator = ctypes.create_string_buffer(lib.SECP256K1_GENERATOR_SIZE)
    assert (
        lib.secp256k1.secp256k1_generator_generate_blinded(
            ctx, generator, a.asset, a.asset_blind
        )
        == 1
    )

    commit = ctypes.create_string_buffer(lib.SECP256K1_PEDERSEN_COMMITMENT_SIZE)
    assert (
        lib.secp256k1.secp256k1_pedersen_commit(
            ctx, commit, a.value_blind, a.value, generator
        )
        == 1
    )

    serialized = ctypes.create_string_buffer(33)
    assert (
        lib.secp256k1.secp256k1_pedersen_commitment_serialize(ctx, serialized, commit)
        == 1
    )

    return LiquidBlindedOutput(conf_value=bytes(serialized))


def _get_commitment(v):
    """v may be an explicit LiquidAmount or BlindedOutput"""
    if isinstance(v, LiquidAmount):
        zero_blinder = b"\x00" * 32
        generator = ctypes.create_string_buffer(lib.SECP256K1_GENERATOR_SIZE)
        assert lib.secp256k1.secp256k1_generator_generate(ctx, generator, v.asset) == 1

        commit = ctypes.create_string_buffer(lib.SECP256K1_PEDERSEN_COMMITMENT_SIZE)
        assert (
            lib.secp256k1.secp256k1_pedersen_commit(
                ctx, commit, zero_blinder, v.value, generator
            )
            == 1
        )
        return commit

    if isinstance(v, LiquidBlindedOutput):
        conf_value = ctypes.create_string_buffer(lib.SECP256K1_PEDERSEN_COMMITMENT_SIZE)
        assert (
            lib.secp256k1.secp256k1_pedersen_commitment_parse(
                ctx, conf_value, v.conf_value
            )
            == 1
        )
        return conf_value

    raise ValueError(v)


def _get_blinded_generator(v):
    if isinstance(v, LiquidAmount):
        generator = ctypes.create_string_buffer(lib.SECP256K1_GENERATOR_SIZE)
        assert (
            lib.secp256k1.secp256k1_generator_generate_blinded(
                ctx, generator, v.asset, v.asset_blind
            )
            == 1
        )
        return generator

    if isinstance(v, LiquidBlindedOutput):
        conf_asset = ctypes.create_string_buffer(lib.SECP256K1_GENERATOR_SIZE)
        assert (
            lib.secp256k1.secp256k1_generator_parse(ctx, conf_asset, v.conf_asset) == 1
        )
        return conf_asset

    raise ValueError(v)


def _collect_commits(values):
    commits = list(map(_get_commitment, values))
    # Return array of pointers to commitments
    result = (ctypes.c_char_p * len(commits))()
    for i, commit in enumerate(commits):
        result[i] = ctypes.cast(commit, ctypes.c_char_p)
    return result


def _verify_balance(inputs, outputs):
    input_commits = _collect_commits(inputs)
    output_commits = _collect_commits(outputs)
    res = lib.secp256k1.secp256k1_pedersen_verify_tally(
        ctx, input_commits, len(input_commits), output_commits, len(output_commits)
    )
    assert res == 1


def _verify_surjection_proof(blinded_output, inputs):
    output_generator = _get_blinded_generator(blinded_output)
    input_generators = list(map(_get_blinded_generator, inputs))
    assert len(output_generator) == lib.SECP256K1_GENERATOR_SIZE
    for g in input_generators:
        assert len(g) == lib.SECP256K1_GENERATOR_SIZE

    n_input_generators = len(input_generators)
    input_generators = b"".join(input_generators)
    assert len(input_generators) == n_input_generators * lib.SECP256K1_GENERATOR_SIZE

    proof = ctypes.create_string_buffer(
        10_000
    )  # TODO: use sizeof(secp256k1_surjectionproof)
    assert (
        lib.secp256k1.secp256k1_surjectionproof_parse(
            ctx,
            proof,
            blinded_output.surjection_proof,
            len(blinded_output.surjection_proof),
        )
        == 1
    )

    assert (
        lib.secp256k1.secp256k1_surjectionproof_verify(
            ctx, proof, input_generators, n_input_generators, output_generator
        )
        == 1
    )
